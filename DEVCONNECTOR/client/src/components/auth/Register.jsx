import React from 'react';
import { useState } from 'react';
// import axios from 'axios';
import { connect } from 'react-redux';
import { Link, Redirect} from 'react-router-dom';
import { setAlert } from '../../actions/alert.jsx';
import PropTypes from 'prop-types';
import { register } from '../../actions/auth.jsx';


// const Register = (props) => {
// here we are just destructuring so we don't need to use props.setAlert
// this is similar to {setAlert} = props
// we could do something like const Login = (props)
// then login = props.login, isAuthenticated = props.isAuthenticated etc
// look at the last line, I wrote comment how I have access to isAuthenticated
const Register = ({ setAlert, register, isAuthenticated }) => {
    const [formData, setFormData] = useState({
        name: "",
        email: "",
        password: "",
        password2: ""
    });

    const { name, email, password, password2 } = formData;

    const handleSubmit = async e => {
        e.preventDefault();
        if (password !== password2) {
            // console.log("Passwords do not match");
            /*
             * This is for redux part
             * Look at the alert.jsx action file
             * payload: {msg, alertType, id}
             * So we are passing 3 arguments, the first is msg, second is alertType and third is id
             * id is automatically generated by uuid (line 6 of alert.jsx in actions folder where we have const id = uuid.v4();)
             * so we don't need to pass id
             * The type is danger because in our css we have a danger class, so type will be based on our css classes defiend in
             * App.css file
             *
             * Later we added another parameter (look at the actions folder alert.jsx file) for the timeout parameter
             */
            // props.setAlert('Passwords do not match', 'danger')
            setAlert("Passwords do not match", "danger", 1500);
        } else {
            register({ name, email, password });

            /*
             * the commented section is simpler way to register an user without using redux
             * later we moved this to the action dispatcher, so auth.jsx file inside actions folder
             */
            /*
             * this is equivalent of doing name: name, email:email etc
             */
            // const newUser = {
            //     name,
            //     email,
            //     password
            // }
            // try {
            //     const config = {
            //         headers:{
            //             'Content-Type': 'application/json',
            //         }
            //     }
            //     const body = JSON.stringify(newUser);
            //     // since we added proxy in package.json file in the client folder, we don't need to
            //     // add localhost:5000
            //     const res = await axios.post('/api/users', body, config);
            //     console.log(res.data);

            // } catch (error) {
            //     console.error(error.response.data);
            // }
        }
    };

    const handleOnChange = e => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    if (isAuthenticated) {
        return <Redirect to="/dashboard" />;
    }
    return (
        <div>
            <h1 className="large text-primary">Sign Up</h1>
            <p className="lead">
                <i className="fas fa-user"></i> Create Your Account
      </p>
            <form className="form" onSubmit={e => handleSubmit(e)}>
                <div className="form-group">
                    <input
                        type="text"
                        placeholder="Name"
                        name="name"
                        required
                        value={name}
                        onChange={e => handleOnChange(e)}
                    />
                </div>
                <div className="form-group">
                    <input
                        type="email"
                        placeholder="Email Address"
                        name="email"
                        onChange={e => handleOnChange(e)}
                        value={email}
                    />
                    <small className="form-text">
                        This site uses Gravatar so if you want a profile image, use a
                        Gravatar email
          </small>
                </div>
                <div className="form-group">
                    <input
                        type="password"
                        placeholder="Password"
                        name="password"
                        minLength="6"
                        onChange={e => handleOnChange(e)}
                        value={password}
                    />
                </div>
                <div className="form-group">
                    <input
                        type="password"
                        placeholder="Confirm Password"
                        name="password2"
                        minLength="6"
                        onChange={e => handleOnChange(e)}
                        value={password2}
                    />
                </div>
                <input type="submit" className="btn btn-primary" value="Register" />
            </form>
            <p className="my-1">
                Already have an account? <Link to="/login">Sign In</Link>
            </p>
        </div>
    );
};
/*
* https://reactjs.org/docs/typechecking-with-proptypes.html
* we are using it as a type checking thing. It is not essential but it helps to reduce bugs
*/
Register.propTypes = {
    setAlert: PropTypes.func.isRequired,
    register: PropTypes.func.isRequired,
    isAuthenticated: PropTypes.bool
};

// kind of assume that what we pass in the first argument of connect, it will receive the existing state whenever
// the state gets updated
const mapStateToProps = state => ({
    isAuthenticated: state.auth.isAuthenticated
});

// export default Register

/* we are connecting this component to the redux
* this is for redux
* Connect takes two arguments in the first (), the state and
* Second argument is any action we want to use that we imported from action files
* This will allow us to acces props.setAlert
* it will also allow us to access whatever mapStateToProps returns, which in this case isAuthenticated
*/
export default connect(mapStateToProps, { setAlert, register })(Register)